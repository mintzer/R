[["index.html", "  R    R? R-studio", "   R   2021-12-27      R? R          . R-studio R-Studio           . "],[".html", " 1 -  1.1 character 1.2 numeric 1.3 logical", "  1 -   -    -   .  ,         . 1.1 character text_var &lt;- &quot;this is a character!&quot; class(text_var) ## [1] &quot;character&quot; 1.2 numeric numeric_var &lt;- 14.6 class(numeric_var) ## [1] &quot;numeric&quot; 1.3 logical logical_var &lt;- FALSE print(logical_var) ## [1] FALSE class(logical_var) ## [1] &quot;logical&quot; logical_var2 &lt;- (1 == 1) print(logical_var2) ## [1] TRUE class(logical_var2) ## [1] &quot;logical&quot; "],[".html", " 2 -  2.1  for 2.2  while", "  2 -          ,  . 2.1  for  (iteration)         ,   .   , ,   .  for     (\" )         .            1  7     :         i      . for (i in 1:7) { print(i) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 ## [1] 7  :  for        character animals &lt;- c(&#39;lion&#39;,&#39;monkey&#39;,&#39;tiger&#39;) for (a in animals) { print(a) } ## [1] &quot;lion&quot; ## [1] &quot;monkey&quot; ## [1] &quot;tiger&quot;  3: # using i as index animals &lt;- c(&#39;lion&#39;,&#39;monkey&#39;,&#39;tiger&#39;) fruits &lt;- c(&#39;apple&#39;,&#39;orange&#39;,&#39;pineapple&#39;) for (i in 1:length(animals)) { print(paste(i, animals[i], fruits[i])) } ## [1] &quot;1 lion apple&quot; ## [1] &quot;2 monkey orange&quot; ## [1] &quot;3 tiger pineapple&quot;  4:       for    # creates a 10X10 matrix contains only NA values mul_table &lt;- matrix(nrow = 10, ncol = 10) row_num &lt;- nrow(mul_table) # 10 rows col_num &lt;- ncol(mul_table) # 10 columns for (i in 1:row_num) { for (j in 1:col_num) { #print(paste(&#39;i:&#39;,i,&#39;j:&#39;,j)) mul_table[i,j] &lt;- i*j # each square will contain the multiplication of the row number with the col number } } print(mul_table) ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] ## [1,] 1 2 3 4 5 6 7 8 9 10 ## [2,] 2 4 6 8 10 12 14 16 18 20 ## [3,] 3 6 9 12 15 18 21 24 27 30 ## [4,] 4 8 12 16 20 24 28 32 36 40 ## [5,] 5 10 15 20 25 30 35 40 45 50 ## [6,] 6 12 18 24 30 36 42 48 54 60 ## [7,] 7 14 21 28 35 42 49 56 63 70 ## [8,] 8 16 24 32 40 48 56 64 72 80 ## [9,] 9 18 27 36 45 54 63 72 81 90 ## [10,] 10 20 30 40 50 60 70 80 90 100 2.2  while       .  1:       i  5.     i  -1     4 . i &lt;- 1 while (i &lt; 5) { print (i) i &lt;- i + 1 } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4  2:  while   : index &lt;- 1 while (index &lt; 7) { # if the remain of dividing &quot;index&quot; by 2 is 0 if (index %% 2 == 0) { # do this: print(paste(&#39;the number&#39;,index, &#39;is even&#39;)) } # else, if &quot;index&quot; is 5 else if (index == 5) { # do this: print(&#39;5!&#39;) } # else, if the remain of dividing &quot;index&quot; by 2 is not 0 else if (index %% 2 != 0) { # do this: print(paste(&#39;the number&#39;,index, &#39;is not even and not 5&#39;)) } index &lt;- index + 1 } ## [1] &quot;the number 1 is not even and not 5&quot; ## [1] &quot;the number 2 is even&quot; ## [1] &quot;the number 3 is not even and not 5&quot; ## [1] &quot;the number 4 is even&quot; ## [1] &quot;5!&quot; ## [1] &quot;the number 6 is even&quot; "],[".html", " 3 -  3.1   3.2   3.3   ", "  3 -  3.1     +  -  *  /  ^   %%  -   %/%    3.2       &amp; AND expr1 &amp; expr2   TRUE  expr1 - expr2  TRUE | OR expr1 | expr2   TRUE   , expr1  expr2,  TRUE ! NOT expr!   TRUE  expr  TRUE 3.3    "],[".html", " 4 -  4.1    4.2   4.3  4.4   ", "  4 -  4.1         R         .   -         .        -      ,   .            (input)     (output). 4.2   name_of_function &lt;- function(var1, var2, var3=default_value) { ** some code ** return(var4) } 4.3      bigger        .        ,      . bigger &lt;- function(num1, num2) { if (num1 &gt; num2) { return(num1) } else { return(num2) } } bigger_num &lt;- bigger(24,29) print(paste(&#39;The bigger number is:&#39;, bigger_num)) ## [1] &quot;The bigger number is: 29&quot; bigger_num &lt;- bigger(57,36) print(paste(&#39;The bigger number is:&#39;, bigger_num)) ## [1] &quot;The bigger number is: 57&quot; 4.4           (default).           . ,       ,       .      ,   num2    6  . bigger &lt;- function(num1, num2=6) { if (num1 &gt; num2) { return(num1) } else { return(num2) } } bigger_num &lt;- bigger(24) print(paste(&#39;The bigger number is:&#39;, bigger_num)) ## [1] &quot;The bigger number is: 24&quot; bigger_num &lt;- bigger(3) print(paste(&#39;The bigger number is:&#39;, bigger_num)) ## [1] &quot;The bigger number is: 6&quot; # we can still change those two values! bigger_num &lt;- bigger(num1 = 7, num2 = 8) print(paste(&#39;The bigger number is:&#39;, bigger_num)) ## [1] &quot;The bigger number is: 8&quot; "],["--.html", " 5 -    5.1 rep 5.2 print 5.3 class", "  5 -    5.1 rep      0  50  rep(0,50) ## [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ## [39] 0 0 0 0 0 0 0 0 0 0 0 0      hey  20  rep(&quot;hey&quot;,20) ## [1] &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; ## [13] &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; 5.2 print        print(&#39;Hi!&#39;) ## [1] &quot;Hi!&quot; 5.3 class        .   -   . class(14) ## [1] &quot;numeric&quot; class(7.2) ## [1] &quot;numeric&quot; class(&#39;Ten&#39;) ## [1] &quot;character&quot; class(FALSE) ## [1] &quot;logical&quot; df &lt;- data.frame() class(df) ## [1] &quot;data.frame&quot; "],["data.html", " 6 - data.frame", "  6 - data.frame Data Frame  ,    # Create the data frame. emp.data &lt;- data.frame( emp_id = c (1:5), emp_name = c(&quot;Rick&quot;,&quot;Dan&quot;,&quot;Michelle&quot;,&quot;Ryan&quot;,&quot;Gary&quot;), salary = c(623.3,515.2,611.0,729.0,843.25), start_date = as.Date(c(&quot;2012-01-01&quot;, &quot;2013-09-23&quot;, &quot;2014-11-15&quot;, &quot;2014-05-11&quot;, &quot;2015-03-27&quot;)), stringsAsFactors = FALSE ) # Print the data frame. print(emp.data) ## emp_id emp_name salary start_date ## 1 1 Rick 623.30 2012-01-01 ## 2 2 Dan 515.20 2013-09-23 ## 3 3 Michelle 611.00 2014-11-15 ## 4 4 Ryan 729.00 2014-05-11 ## 5 5 Gary 843.25 2015-03-27 "],["ggplot.html", " 7 - ggplot", "  7 - ggplot # install the library ggplot2 if it is not already installed if (!require(&quot;ggplot2&quot;)) install.packages(&quot;ggplot2&quot;) ## Loading required package: ggplot2 # load the library ggplot2 library(&quot;ggplot2&quot;) "],["tidyverse.html", " 8 - tidyverse 8.1 filter 8.2 mutate", "  8 - tidyverse # install the library tidyverse if it is not already installed if (!require(&quot;tidyverse&quot;)) install.packages(&quot;tidyverse&quot;) # load the library tidyverse library(&quot;tidyverse&quot;) # install the library tidylog if it is not already installed if (!require(&quot;tidylog&quot;)) install.packages(&quot;tidylog&quot;) # load the library tidylog library(&quot;tidylog&quot;) cereal_df &lt;- read.csv(file = &#39;cereal.csv&#39;) head(cereal_df) ## name calories sodium potass rating ## 1 100% Bran 70 130 280 68.40297 ## 2 100% Natural Bran 120 15 135 33.98368 ## 3 All-Bran 70 260 320 59.42551 ## 4 All-Bran with Extra Fiber 50 140 330 93.70491 ## 5 Almond Delight 110 200 -1 34.38484 ## 6 Apple Cinnamon Cheerios 110 180 70 29.50954 8.1 filter cereal_df &lt;- cereal_df %&gt;% filter(rating &gt; 70) ## filter: removed 74 rows (96%), 3 rows remaining head(cereal_df) ## name calories sodium potass rating ## 1 All-Bran with Extra Fiber 50 140 330 93.70491 ## 2 Shredded Wheat &#39;n&#39;Bran 90 0 140 74.47295 ## 3 Shredded Wheat spoon size 90 0 120 72.80179 8.2 mutate cereal_df &lt;- read.csv(file = &#39;cereal.csv&#39;) cereal_df &lt;- cereal_df %&gt;% mutate( high_clorie = case_when( as.numeric(calories) &gt; 80 ~ TRUE, as.numeric(calories) &lt;= 80 ~ FALSE )) ## mutate: new variable &#39;high_clorie&#39; (logical) with 3 unique values and 4% NA head(cereal_df) ## name calories sodium potass rating high_clorie ## 1 100% Bran 70 130 280 68.40297 FALSE ## 2 100% Natural Bran 120 15 135 33.98368 TRUE ## 3 All-Bran 70 260 320 59.42551 FALSE ## 4 All-Bran with Extra Fiber 50 140 330 93.70491 FALSE ## 5 Almond Delight 110 200 -1 34.38484 TRUE ## 6 Apple Cinnamon Cheerios 110 180 70 29.50954 TRUE "],[".html", "      ", "      1:       1  10     (1,4,9,16 ). for (i in 1:10) { print(i^2) }  2:       1  100        3    7. for (i in 1:100) { if ((i %% 3 == 0 ) | (i %% 7 == 0)) { print(i) } }  3:       1  25      -8 23. for (i in 1:25) { if ((i != 8) &amp; (i != 23)) { print(i) } }  4:    num_to_skip nums_to_skip &lt;- c(3,6,8,22,32,33)       1  40       nums_to_skip  - %in% 3 %in% nums_to_skip # returns TRUE 5 %in% nums_to_skip # returns FALSE nums_to_skip &lt;- c(3,6,8,22,32,33) for (i in 1:40) { if ( ! (i %in% nums_to_skip)) { print(i) } }     1:    num_to_txt   -0  9 (numeric)     (character). : num_to_txt(4) # returns &quot;four&quot; num_to_txt &lt;- function(digit) { if (class(digit) == &quot;numeric&quot; &amp; nchar(digit) == 1) { if (digit == 0) {return (&#39;zero&#39;)} else if (digit == 1) {return (&#39;one&#39;)} else if (digit == 2) {return (&#39;two&#39;)} else if (digit == 3) {return (&#39;three&#39;)} else if (digit == 4) {return (&#39;four&#39;)} else if (digit == 5) {return (&#39;five&#39;)} else if (digit == 6) {return (&#39;six&#39;)} else if (digit == 7) {return (&#39;seven&#39;)} else if (digit == 8) {return (&#39;eight&#39;)} else if (digit == 9) {return (&#39;nine&#39;)} } else {return(&#39;not a valid digit. please try again&#39;)} } num_to_txt(3) # &quot;three&quot; num_to_txt(7) # &quot;seven&quot; num_to_txt(13) # &quot;Not a valid digit. please try again&quot; num_to_txt(9) # &quot;nine&quot;  2:    is_even   (numeric)     (TRUE  FALSE). : is_even(456) # returns TRUE is_even &lt;- function(num) { if (class(num) == &quot;numeric&quot;) { if (num %% 2 == 0) {return (TRUE)} else {return (FALSE)} } else {return(&#39;not a valid number please try again&#39;)} } is_even(2) # TRUE is_even(67253) # FALSE is_even(3586976) # TRUE is_even(&#39;34&#39;) # &#39;Not a valid number please try again&#39; summary { display: list-item; text-align: right; } summary::after { content: ' ' } details[open] > summary::after { content: ' ' } "]]
