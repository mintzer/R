[["tidyverse.html", " 7 - tidyverse 7.1 Pipe 7.2 read.csv 7.3 filter 7.4 mutate 7.5 select 7.6 sample_frac", "  7 - tidyverse tidyverse           .    : 1.  dplyr      2.  ggplot2      # install the library tidyverse if it is not already installed if (!require(&quot;tidyverse&quot;)) install.packages(&quot;tidyverse&quot;) # load the library tidyverse library(&quot;tidyverse&quot;) # install the library tidylog if it is not already installed if (!require(&quot;tidylog&quot;)) install.packages(&quot;tidylog&quot;) # load the library tidylog library(&quot;tidylog&quot;) 7.1 Pipe  dplyr,    tidyverse,     - Pipe. # ****** %&gt;% ****** some_data %&gt;% some_function() # the code above is equivalent to this: some_function(some_data)         .    .   dataframes        .  -Pipe      tidyverse    .  :     1  8,    Pipe  sum. library(&quot;dplyr&quot;) 1:8 %&gt;% sum() ## [1] 36 # or: # 1:8 %&gt;% sum # both valid   -  sum    . ,      : sum(1:8) ## [1] 36       vec1 &lt;- c(1.3,2.4,3.1,4,5) rounded_sum &lt;- vec1 %&gt;% sum() %&gt;% round() # the same as: rounded_sum_old_way &lt;- round(sum(vec1)) 7.2 read.csv  read.csv   csv    data.frame       cereal.csv    cereal.csv cereal_df &lt;- read.csv(file = &#39;cereal.csv&#39;) head(cereal_df) ## name calories sodium potass rating ## 1 100% Bran 70 130 280 68.40297 ## 2 100% Natural Bran 120 15 135 33.98368 ## 3 All-Bran 70 260 320 59.42551 ## 4 All-Bran with Extra Fiber 50 140 330 93.70491 ## 5 Almond Delight 110 200 -1 34.38484 ## 6 Apple Cinnamon Cheerios 110 180 70 29.50954 summary(cereal_df) ## name calories sodium potass ## Length:77 Length:77 Min. : 0.0 Min. : -1.00 ## Class :character Class :character 1st Qu.:125.0 1st Qu.: 35.00 ## Mode :character Mode :character Median :180.0 Median : 85.00 ## Mean :154.6 Mean : 89.64 ## 3rd Qu.:210.0 3rd Qu.:110.00 ## Max. :320.0 Max. :330.00 ## rating ## Min. : 1.00 ## 1st Qu.:31.23 ## Median :40.11 ## Mean :41.25 ## 3rd Qu.:50.83 ## Max. :93.70 7.3 filter  filter      .    filter    cereal_df .  cereal_df      rating  -70.        : cereal_df_filtered cereal_df_filtered &lt;- cereal_df %&gt;% filter(rating &gt; 70) ## filter: removed 74 rows (96%), 3 rows remaining head(cereal_df_filtered) ## name calories sodium potass rating ## 1 All-Bran with Extra Fiber 50 140 330 93.70491 ## 2 Shredded Wheat &#39;n&#39;Bran 90 0 140 74.47295 ## 3 Shredded Wheat spoon size 90 0 120 72.80179 7.4 mutate  mutate     df    . cereal_df &lt;- read.csv(file = &#39;cereal.csv&#39;) cereal_df &lt;- cereal_df %&gt;% mutate( high_clorie = case_when( as.numeric(calories) &gt; 80 ~ TRUE, as.numeric(calories) &lt;= 80 ~ FALSE, TRUE ~ NA )) ## mutate: new variable &#39;high_clorie&#39; (logical) with 3 unique values and 4% NA head(cereal_df) ## name calories sodium potass rating high_clorie ## 1 100% Bran 70 130 280 68.40297 FALSE ## 2 100% Natural Bran 120 15 135 33.98368 TRUE ## 3 All-Bran 70 260 320 59.42551 FALSE ## 4 All-Bran with Extra Fiber 50 140 330 93.70491 FALSE ## 5 Almond Delight 110 200 -1 34.38484 TRUE ## 6 Apple Cinnamon Cheerios 110 180 70 29.50954 TRUE 7.5 select  select      data.frame.   data.frame    (   )     data.frame,    .     cereal_df   calories - sodium . cereal_df &lt;- read.csv(file = &#39;cereal.csv&#39;) cereal_df &lt;- cereal_df %&gt;% select(c(calories, sodium)) ## select: dropped 3 variables (name, potass, rating) colnames(cereal_df) ## [1] &quot;calories&quot; &quot;sodium&quot; 7.6 sample_frac  sample_frac        data.frame.    40%   cereal_df. cereal_df &lt;- read.csv(file = &#39;cereal.csv&#39;) cereal_df &lt;- cereal_df %&gt;% sample_frac(0.4) ## sample_frac: removed 46 rows (60%), 31 rows remaining "]]
