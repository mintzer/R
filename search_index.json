[["index.html", "  R  R R-studio", "   R       : 2022-06-10              R -  , , ,  .                    .  ,          .  :         R,     .      ,             .    ,  ,     ,  !    R R          .      R    (syntax)  (conventions). R-studio R-Studio           . "],[".html", " 1 -  character numeric logical", "  1 -   -    -   .      ,    .         ,       ( -     )       :    (Assignment) var_name &lt;- value     , R     ,   .    (    ),     .    ,  . var1 &lt;- 2 # initial assignment print(var1) ## [1] 2 # we can change the value and the type of a variable var1 &lt;- &#39;different value!&#39; print(var1) ## [1] &quot;different value!&quot; print(var2) # not exist ## Error in print(var2): object &#39;var2&#39; not found character      (, , ).   .        character: text_var &lt;- &quot;this is a character!&quot; class(text_var) ## [1] &quot;character&quot; text_var2 &lt;- &#39;this is also a character!&#39; # mixing single quotes and double quotes to implement # quotes into the character text_var3 &lt;- &quot;it&#39;s still a character!&quot; text_var4 &lt;- &#39;Mark Twain said: &quot;I am an old man and have known a great many troubles, but most of them never happened.&quot;&#39; numeric    ,     . : numeric_var &lt;- 14.6 class(numeric_var) ## [1] &quot;numeric&quot; numeric_var2 &lt;- 13 :         -R   -numeric. NaN      Not a Number. ,  0  NaN: nan_val &lt;- 0/0 print(nan_val) ## [1] NaN class(nan_val) ## [1] &quot;numeric&quot; logical     TRUE    FALSE.        R     . ,  FALSE  , R       FALSE.   -   False,  false , R    .   FALSE  FALSE ( ), R    character. NA      Not Available. ,   . : logical_var &lt;- FALSE print(logical_var) ## [1] FALSE class(logical_var) ## [1] &quot;logical&quot; logical_var2 &lt;- (1 == 1) # returns TRUE print(logical_var2) ## [1] TRUE class(logical_var2) ## [1] &quot;logical&quot; logical_var_3 &lt;- NA print(logical_var_3) ## [1] NA class(logical_var_3) ## [1] &quot;logical&quot; "],[".html", " 2 -   for  while  repeat", "  2 -          ,  .  for  (iteration)         ,   .   , ,   .  for     ( )         .  : for (value in sequence) { *loop body* #the code here will run every time the loop iterate }            1  7     :         i      . for (i in 1:7) { print(i) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 ## [1] 7  :  for        character animals &lt;- c(&#39;lion&#39;,&#39;monkey&#39;,&#39;tiger&#39;) for (a in animals) { print(a) } ## [1] &quot;lion&quot; ## [1] &quot;monkey&quot; ## [1] &quot;tiger&quot;  3: # using i as index animals &lt;- c(&#39;lion&#39;,&#39;monkey&#39;,&#39;tiger&#39;) fruits &lt;- c(&#39;apple&#39;,&#39;orange&#39;,&#39;pineapple&#39;) for (i in 1:length(animals)) { print(paste(i, animals[i], fruits[i])) } ## [1] &quot;1 lion apple&quot; ## [1] &quot;2 monkey orange&quot; ## [1] &quot;3 tiger pineapple&quot;  4:       for    # creates a 10X10 matrix contains only NA values mul_table &lt;- matrix(nrow = 10, ncol = 10) row_num &lt;- nrow(mul_table) # 10 rows col_num &lt;- ncol(mul_table) # 10 columns for (i in 1:row_num) { for (j in 1:col_num) { #print(paste(&#39;i:&#39;,i,&#39;j:&#39;,j)) mul_table[i,j] &lt;- i*j # each square will contain the multiplication of the row number with the col number } } print(mul_table) ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] ## [1,] 1 2 3 4 5 6 7 8 9 10 ## [2,] 2 4 6 8 10 12 14 16 18 20 ## [3,] 3 6 9 12 15 18 21 24 27 30 ## [4,] 4 8 12 16 20 24 28 32 36 40 ## [5,] 5 10 15 20 25 30 35 40 45 50 ## [6,] 6 12 18 24 30 36 42 48 54 60 ## [7,] 7 14 21 28 35 42 49 56 63 70 ## [8,] 8 16 24 32 40 48 56 64 72 80 ## [9,] 9 18 27 36 45 54 63 72 81 90 ## [10,] 10 20 30 40 50 60 70 80 90 100  while       .  : while (condition) { *loop body* #the code here will run every time the loop iterate, #while the condition returns TRUE }  1:       i  5.     i  -1     4 . i &lt;- 1 while (i &lt; 5) { print (i) i &lt;- i + 1 } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4  2:  while   : index &lt;- 1 while (index &lt; 7) { # if the remain of dividing &quot;index&quot; by 2 is 0 if (index %% 2 == 0) { # do this: print(paste(&#39;the number&#39;,index, &#39;is even&#39;)) } # else, if &quot;index&quot; is 5 else if (index == 5) { # do this: print(&#39;5!&#39;) } # else, if the remain of dividing &quot;index&quot; by 2 is not 0 else if (index %% 2 != 0) { # do this: print(paste(&#39;the number&#39;,index, &#39;is not even and not 5&#39;)) } index &lt;- index + 1 } ## [1] &quot;the number 1 is not even and not 5&quot; ## [1] &quot;the number 2 is even&quot; ## [1] &quot;the number 3 is not even and not 5&quot; ## [1] &quot;the number 4 is even&quot; ## [1] &quot;5!&quot; ## [1] &quot;the number 6 is even&quot;  repeat     -      .    repeat  ,       : repeat { *loop body* #the code here will run time after time if (*stopping condition*) { break } } :        10. i = 0 repeat { i &lt;- i + 2 print(i) if (i == 10) { break } } ## [1] 2 ## [1] 4 ## [1] 6 ## [1] 8 ## [1] 10 "],[".html", " 3 -        ", "  3 -      +  -  *  /  ^   %%  -   %/%          &amp; AND expr1 &amp; expr2   TRUE  expr1 - expr2  TRUE | OR expr1 | expr2   TRUE   , expr1  expr2,  TRUE ! NOT expr!   TRUE  expr  TRUE %in% a %in% b  TRUE  a   b       &gt; value1 &lt; value2   TRUE       =&gt; value1 &lt;= value2   TRUE          &lt; value1 &gt; value2   TRUE       =&lt; value1 &gt;= value2   TRUE          == value1 == value2   TRUE       =! value1 != value2   TRUE        "],[".html", " 4 -          ", "  4 -          R         .   -         .        -      ,   .            (input)     (output).   name_of_function &lt;- function(var1, var2, var3=default_value) { ** some code ** return(var4) }      bigger        .    ,  ,   .        ,      . bigger &lt;- function(num1, num2) { if (num1 &gt; num2) { return(num1) } else { return(num2) } } bigger_num &lt;- bigger(24,29) print(paste(&#39;The bigger number is:&#39;, bigger_num)) ## [1] &quot;The bigger number is: 29&quot; bigger_num &lt;- bigger(57,36) print(paste(&#39;The bigger number is:&#39;, bigger_num)) ## [1] &quot;The bigger number is: 57&quot;           (default).           . ,       ,       .      ,   num2    6  . bigger &lt;- function(num1, num2=6) { if (num1 &gt; num2) { return(num1) } else { return(num2) } } bigger_num &lt;- bigger(24) print(paste(&#39;The bigger number is:&#39;, bigger_num)) ## [1] &quot;The bigger number is: 24&quot; bigger_num &lt;- bigger(3) print(paste(&#39;The bigger number is:&#39;, bigger_num)) ## [1] &quot;The bigger number is: 6&quot; # we can still change those two values! bigger_num &lt;- bigger(num1 = 7, num2 = 8) print(paste(&#39;The bigger number is:&#39;, bigger_num)) ## [1] &quot;The bigger number is: 8&quot; "],["--.html", " 5 -    print paste rep seq class ifelse IQR", "  5 -           {base} print  print       print(&#39;Hi!&#39;) ## [1] &quot;Hi!&quot; paste  paste         (concatenation).    character. paste(&#39;how&#39;, &#39;you&#39;, &quot;doin&#39;?&quot;) ## [1] &quot;how you doin&#39;?&quot; paste(&#39;how&#39;, &#39;you&#39;, &quot;doin&#39;?&quot;, sep=&#39;-&#39;) ## [1] &quot;how-you-doin&#39;?&quot;  paste0         . paste0(1, 2, &quot;3&quot;) ## [1] &quot;123&quot; # the same as: paste(1,2,&quot;3&quot;, sep=&quot;&quot;) ## [1] &quot;123&quot; rep  rep  (replicate)     . :     0  30  rep(0,30) ## [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 :   -0     . ,   . rep(c(0),30) ## [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  :     hey  20  rep(&quot;hey&quot;,20) ## [1] &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; ## [13] &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; &quot;hey&quot; seq  seq          ,  . seq(from = 1, to = 100, by = 11) ## [1] 1 12 23 34 45 56 67 78 89 100 seq(from = 4, to = 6, by = 0.2) ## [1] 4.0 4.2 4.4 4.6 4.8 5.0 5.2 5.4 5.6 5.8 6.0 class  class       .   -   . class(14) ## [1] &quot;numeric&quot; class(7.2) ## [1] &quot;numeric&quot; class(&#39;Ten&#39;) ## [1] &quot;character&quot; class(FALSE) ## [1] &quot;logical&quot; df &lt;- data.frame() class(df) ## [1] &quot;data.frame&quot; ifelse  ifelse      .    : ,     ,      . ifelse(1==1, &quot;it&#39;s true!&quot;,&quot;it&#39;s false!&quot;) ## [1] &quot;it&#39;s true!&quot; ifelse(2 * 2 == 5, &quot;it&#39;s true!&quot;,&quot;it&#39;s false!&quot;) ## [1] &quot;it&#39;s false!&quot; IQR  IQR   ( )      .   -       :     -75    -25. set.seed(5) # to make sure the results # will be the same every time the code run. salary = rnorm(1000, 5600, 500) IQR(salary) ## [1] 673.7134 iqr &lt;- quantile(salary, c(0.25,0.75)) # the same as the diff between the 75th quantile and 25th quantile print(iqr) ## 25% 75% ## 5272.225 5945.938 :          200  500.    ,     . set.seed(5) # to make sure the results # will be the same every time the code run. salary = rnorm(1000, 5600, 200) IQR(salary) ## [1] 269.4854 : "],["data.html", " 6 - data.frame  ", "  6 - data.frame data.frame           .           (    )  :    emp_data    data.frame # Create the data frame. emp_data &lt;- data.frame( emp_id = c(1:5), emp_name = c(&quot;Moshe&quot;,&quot;Adi&quot;,&quot;Michelle&quot;,&quot;Avi&quot;,&quot;Rotem&quot;), salary = c(6300,9000,11000,8400,7500) ) # Print the data frame. print(emp_data) ## emp_id emp_name salary ## 1 1 Moshe 6300 ## 2 2 Adi 9000 ## 3 3 Michelle 11000 ## 4 4 Avi 8400 ## 5 5 Rotem 7500      . class(emp_data) # type of emp_data ## [1] &quot;data.frame&quot; ncol(emp_data) # number of columns ## [1] 3 nrow(emp_data) # number of rows ## [1] 5 dim(emp_data) # dimensions: c(nrow, ncol) ## [1] 5 3 colnames(emp_data) # columns names ## [1] &quot;emp_id&quot; &quot;emp_name&quot; &quot;salary&quot;           $     : some_data_frame$column_name         emp_id  emp_data emp_data$emp_id ## [1] 1 2 3 4 5         emp_name  emp_data emp_data$emp_name ## [1] &quot;Moshe&quot; &quot;Adi&quot; &quot;Michelle&quot; &quot;Avi&quot; &quot;Rotem&quot;         salary  emp_data emp_data$salary ## [1] 6300 9000 11000 8400 7500 "],["tidyverse.html", " 7 - tidyverse Pipe read.csv filter mutate select sample_frac", "  7 - tidyverse tidyverse           .    : 1.  dplyr      2.  ggplot2      # install the library tidyverse if it is not already installed if (!require(&quot;tidyverse&quot;)) install.packages(&quot;tidyverse&quot;) # load the library tidyverse library(&quot;tidyverse&quot;) # install the library tidylog if it is not already installed if (!require(&quot;tidylog&quot;)) install.packages(&quot;tidylog&quot;) # load the library tidylog library(&quot;tidylog&quot;) Pipe  dplyr,    tidyverse,     - Pipe. # ****** %&gt;% ****** some_data %&gt;% some_function() # the code above is equivalent to this: some_function(some_data)         .    .   dataframes        .  -Pipe      tidyverse    .  :     1  8,    Pipe  sum. library(&quot;dplyr&quot;) 1:8 %&gt;% sum() ## [1] 36 # or: # 1:8 %&gt;% sum # both valid   -  sum    . ,      : sum(1:8) ## [1] 36       vec1 &lt;- c(1.3,2.4,3.1,4,5) rounded_sum &lt;- vec1 %&gt;% sum() %&gt;% round() # the same as: rounded_sum_old_way &lt;- round(sum(vec1)) read.csv  read.csv   csv    data.frame :      -Tidyverse          .       cereal.csv    cereal.csv cereal_df &lt;- read.csv(file = &#39;cereal.csv&#39;) head(cereal_df) ## name calories sodium potass rating ## 1 100% Bran 70 130 280 68.40297 ## 2 100% Natural Bran 120 15 135 33.98368 ## 3 All-Bran 70 260 320 59.42551 ## 4 All-Bran with Extra Fiber 50 140 330 93.70491 ## 5 Almond Delight 110 200 -1 34.38484 ## 6 Apple Cinnamon Cheerios 110 180 70 29.50954 summary(cereal_df) ## name calories sodium potass ## Length:77 Length:77 Min. : 0.0 Min. : -1.00 ## Class :character Class :character 1st Qu.:125.0 1st Qu.: 35.00 ## Mode :character Mode :character Median :180.0 Median : 85.00 ## Mean :154.6 Mean : 89.64 ## 3rd Qu.:210.0 3rd Qu.:110.00 ## Max. :320.0 Max. :330.00 ## rating ## Min. : 1.00 ## 1st Qu.:31.23 ## Median :40.11 ## Mean :41.25 ## 3rd Qu.:50.83 ## Max. :93.70 filter  filter      .    filter    cereal_df .  cereal_df      rating  -70.        : cereal_df_filtered cereal_df_filtered &lt;- cereal_df %&gt;% filter(rating &gt; 70) ## filter: removed 74 rows (96%), 3 rows remaining head(cereal_df_filtered) ## name calories sodium potass rating ## 1 All-Bran with Extra Fiber 50 140 330 93.70491 ## 2 Shredded Wheat &#39;n&#39;Bran 90 0 140 74.47295 ## 3 Shredded Wheat spoon size 90 0 120 72.80179 mutate  mutate     df    . cereal_df &lt;- read.csv(file = &#39;cereal.csv&#39;) cereal_df &lt;- cereal_df %&gt;% mutate( high_clorie = case_when( as.numeric(calories) &gt; 80 ~ TRUE, as.numeric(calories) &lt;= 80 ~ FALSE, TRUE ~ NA )) ## mutate: new variable &#39;high_clorie&#39; (logical) with 3 unique values and 4% NA head(cereal_df) ## name calories sodium potass rating high_clorie ## 1 100% Bran 70 130 280 68.40297 FALSE ## 2 100% Natural Bran 120 15 135 33.98368 TRUE ## 3 All-Bran 70 260 320 59.42551 FALSE ## 4 All-Bran with Extra Fiber 50 140 330 93.70491 FALSE ## 5 Almond Delight 110 200 -1 34.38484 TRUE ## 6 Apple Cinnamon Cheerios 110 180 70 29.50954 TRUE select  select      data.frame.   data.frame    (   )     data.frame,    .     cereal_df   calories - sodium . cereal_df &lt;- read.csv(file = &#39;cereal.csv&#39;) cereal_df &lt;- cereal_df %&gt;% select(c(calories, sodium)) ## select: dropped 3 variables (name, potass, rating) colnames(cereal_df) ## [1] &quot;calories&quot; &quot;sodium&quot; sample_frac  sample_frac        data.frame.    40%   cereal_df. cereal_df &lt;- read.csv(file = &#39;cereal.csv&#39;) cereal_df &lt;- cereal_df %&gt;% sample_frac(0.4) ## sample_frac: removed 46 rows (60%), 31 rows remaining "],["ggplot.html", " 8 - ggplot", "  8 - ggplot  ggplot2      # install the library ggplot2 if it is not already installed if (!require(&quot;ggplot2&quot;)) install.packages(&quot;ggplot2&quot;) # load the library ggplot2 library(&quot;ggplot2&quot;)    songs.csv  1: QQplot       (    ) if (!require(&quot;ggplot2&quot;)) install.packages(&#39;ggplot2&#39;) # for data visualization if (!require(&quot;tidyverse&quot;)) install.packages(&#39;tidyverse&#39;) # dealing with dataframes if (!require(&quot;tidylog&quot;)) install.packages(&#39;tidylog&#39;) # logs for tidyverse if (!require(&quot;plotrix&quot;)) install.packages(&#39;plotrix&#39;) # for the standard error function songsDataset &lt;- read.csv(&#39;songs.csv&#39;) # read the dataset CSV file songsDataset &lt;- na.omit(songsDataset) # to remove NA values if there are (makes no change) # new categorical column &quot;explicit_text&quot; to translate the binary column &quot;explicit&quot; songsDataset &lt;- songsDataset %&gt;% mutate(explicit_text = case_when( explicit == 0 ~ &quot;Implicit&quot;, explicit == 1 ~ &quot;Explicit&quot;, )) # summary table that holds descriptive statistics about the variable popularity: # mean, sample size, standard deviation, standard error of the sample and median # for both groups - Explicit songs and Implicit songs stats_popularity_per_type &lt;- songsDataset %&gt;% group_by(explicit_text) %&gt;% summarise(popularity_mean = mean(popularity), n=n(), std = sd(popularity), sterr = std.error(popularity), median = median(popularity)) # simultanious qqplot for the variable popularity in both Implicit &amp; Explicit songs ggplot(songsDataset) + geom_qq(aes(sample = popularity, color=explicit_text), size=1) + geom_qq_line(aes(sample = popularity)) + facet_wrap(~explicit_text, ncol = 6, shrink = TRUE) + guides(color=&#39;none&#39;) + labs(x=&#39;Theoretical Z score&#39;, y=&#39;Popularity&#39;, title = &#39;QQplot for the variable popularity in both Implicit &amp; Explicit songs&#39;, subtitle = &#39;To check the noramality assumption on each group&#39;) + theme(plot.title = element_text(color=&quot;grey20&quot;,size=14, face=&quot;bold.italic&quot;), plot.subtitle = element_text(color=&quot;grey20&quot;, face=&quot;italic&quot;))  2:     t    +   ggplot(songsDataset, aes(x=popularity, fill = explicit_text)) + geom_density(alpha=0.5) + geom_vline(data = stats_popularity_per_type, aes(xintercept = popularity_mean), linetype=&quot;dashed&quot;) + geom_text(data = stats_popularity_per_type, aes(x = 87.5, y = 0.03, label = paste(&#39;N:&#39;, n), color = explicit_text), size = 4) + geom_text(data = stats_popularity_per_type, aes(x = 87.5, y = 0.025, label = paste(&#39;Mean:&#39;,round(popularity_mean,2)), color = explicit_text), size = 4) + geom_text(data = stats_popularity_per_type, aes(x = 87.5, y = 0.02, label = paste(&#39;Median:&#39;,round(median,2)), color = explicit_text), size = 4) + geom_text(data = stats_popularity_per_type, aes(x = 87.5, y = 0.015, label = paste(&#39;Std:&#39;,round(std,2)), color = explicit_text), size = 4) + geom_text(data = stats_popularity_per_type, aes(x = 87.5, y = 0.01, label = paste(&#39;Sterr:&#39;,round(sterr,2)), color = explicit_text), size = 4) + facet_wrap(~explicit_text, ncol=1) + guides(color=&#39;none&#39;, fill=&#39;none&#39;) + scale_fill_manual(values = c(&#39;cornflowerblue&#39;, &#39;darkgoldenrod&#39;)) + scale_color_manual(values = c(&#39;cornflowerblue&#39;, &#39;darkgoldenrod&#39;)) + labs(title = &#39;Is there a difference in popularity between Explicit and Implicit songs?&#39;, subtitle = &#39;each vertical line represents the sample mean&#39;, y=&#39;Density&#39;,x=&#39;Popularity grade&#39;) + theme(plot.title = element_text(color=&quot;grey25&quot;,size=13.5, face=&quot;bold.italic&quot;), plot.subtitle = element_text(color=&quot;grey25&quot;, face=&quot;italic&quot;))  3: QQplot        (11    ) # extract the year, century and decade songsDataset = songsDataset %&gt;% # extract only the 4 digits represents the year - 1996, 1956, 1977 etc mutate(release_year = str_extract_all(release_date, &quot;\\\\d{4}&quot;)) %&gt;% # 1900s, 2000s mutate(release_century = paste(substr(release_year,1,2), &#39;00s&#39;, sep=&#39;&#39;)) %&gt;% # 1920s, 1950s, 2010s, etc mutate(release_decade = paste(substr(release_year,1,3), &#39;0s&#39;, sep=&#39;&#39;)) %&gt;% # make sure the data is OK. songs should be from 1922 to 2021 filter(release_year &gt;= 1922 &amp; release_year &lt;= 2021) # summary table that holds descriptive statistics about the variable tempo: # mean, sample size, standard deviation, standard error of the sample and median # for all decades - from 1920s to 2020s stats_relase_decade_and_tempo = songsDataset %&gt;% group_by(release_decade) %&gt;% summarise(tempo_mean = round(mean(tempo),2), n=n(), std = round(sd(tempo),2), sterr = round(std.error(tempo),3), median = round(median(tempo),2)) %&gt;% # order the stats table by the decade arrange(release_decade) # simultaneous qqplot for the variable tempo in all decades ggplot(songsDataset) + # it takes some time to run... a lot of data to process geom_qq(aes(sample = tempo, color=release_decade), size=0.5) + geom_qq_line(aes(sample = tempo)) + facet_wrap(~release_decade, ncol = 6, shrink = TRUE) + guides(color=&#39;none&#39;) + labs(x=&#39;Theoretical Z score&#39;, y=&#39;Tempo&#39;, title = &#39;QQplot for the variable tempo in all decades&#39;, subtitle = &#39;To check the noramality assumption on each group&#39;) + theme(#aspect.ratio=1, plot.title = element_text(color=&quot;grey20&quot;,size=14, face=&quot;bold.italic&quot;), plot.subtitle = element_text(color=&quot;grey20&quot;, face=&quot;italic&quot;))  4:         11  +   ggplot(songsDataset, aes(x=tempo, fill=release_decade)) + geom_density(alpha = 0.5) + facet_wrap(~release_decade, ncol = 3,shrink = TRUE, dir=&quot;v&quot;) + geom_vline(data = stats_relase_decade_and_tempo, aes(xintercept = tempo_mean), linetype=&quot;dashed&quot;) + geom_text(data = stats_relase_decade_and_tempo, aes(x = 200, y = 0.015, label = paste(&#39;Mean:&#39;,round(tempo_mean,2)), color = release_decade), size = 2.8) + geom_text(data = stats_relase_decade_and_tempo, aes(x = 200, y = 0.011, label = paste(&#39;Median:&#39;,round(median,2)), color = release_decade), size = 2.8) + geom_text(data = stats_relase_decade_and_tempo, aes(x = 200, y = 0.007, label = paste(&#39;sd:&#39;,round(std,2)), color = release_decade), size = 2.8) + labs(x = &#39;Tempo&#39;, y=&#39;Density&#39;, title = &#39;Density distribuition of Tempo by Decade&#39;, subtitle = &#39;each vertical line represents the sample mean&#39;) + guides(color=&#39;none&#39;, fill=&#39;none&#39;) + theme(plot.title = element_text(color=&quot;grey20&quot;,size=14, face=&quot;bold.italic&quot;), plot.subtitle = element_text(color=&quot;grey20&quot;, face=&quot;italic&quot;)) "],["--.html", " 9 -         ", "  9 -            rgeom(n, prob) :  10       1/6 .         ? rgeom(n=10, prob=1/6) ## [1] 3 11 4 2 0 20 4 0 9 2    dgeom(x, prob, log = FALSE) :             1/4 p = (1/4) n = 3 dgeom(x = n, prob = p) # 0.1054688     p pgeom(q, prob, lower.tail = TRUE, log.p = FALSE) :        . (,         .  )      1/3 . p = 1/3 n = 4 pgeom(q = n, prob = p, lower.tail = TRUE) # 0.8683128    p (   -p) :        . (,         .  )      1/3 . p = 1/3 n = 4 pgeom(q = n, prob = p, lower.tail = FALSE) # 0.1316872        ,    qgeom(p, prob, lower.tail = TRUE, log.p = FALSE)      pgeom.  - pgeom       . qgeom       . :         0.8     0.2? qgeom(p = 0.8, prob = .2) ## [1] 7     dgeom, rgeom, pgeom, qgeom         rbinom(n, size, prob) :  5      10     1/3 .      ? rbinom(n=5, size=10, prob=1/3) ## [1] 4 2 5 5 2    dbinom(x, size, prob, log = FALSE) :     3   5     2/5  p = 2/5 size = 5 successes = 3 dbinom(x = successes, size = size, prob = p) # 0.2304     p pbinom(q, size, prob, lower.tail = TRUE, log.p = FALSE) :     3 . (,      .  )     5     1/2 . p = 1/2 n = 3 size = 5 pbinom(q = n, size = size, prob = p, lower.tail = TRUE) # 0.8125    p (   -p) :     4 . (,    -3 )     7     1/2 . p = 1/2 n = 3 size = 7 pbinom(q = n, size = size, prob = p, lower.tail = FALSE) # 0.5      ,    qbinom(p, size, prob, lower.tail = TRUE, log.p = FALSE)      pbinom.  - pbinom       . qbinom       . :      0.7     7     1/3 . ( -       30%  ) qbinom(p = 0.7, size=7, prob = 1/3) ## [1] 3     dbinom, rbinom, pbinom, qbinom         rnorm(n, mean = 0, sd = 1) :  300       60   6. :           ( 0   1) n = 300 mean = 60 sd = 6 norm_sample &lt;- rnorm(n=n, mean=mean, sd=sd) # print the first 20 items print(norm_sample[0:20]) ## [1] 63.57442 66.02607 66.57421 64.82201 59.35782 62.20865 68.42585 60.20255 ## [9] 65.09590 55.69509 46.75206 49.20084 54.55330 54.68228 51.25400 59.41590 ## [17] 68.37518 58.69086 56.86264 55.21765       300  .       60,    60,       ,        .        -6   -6.   .  ,         dnorm(x, mean = 0, sd = 1, log = FALSE) :    175,      170   5 dnorm(x=175, mean=170, sd=5) ## [1] 0.04839414      pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE) :       -120      100   12.  -     ,  ,     q=120 mean=100 sd=12 pnorm(q = q, mean = mean, sd = sd) ## [1] 0.9522096      () qnorm(p, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE) :         200   30,    50%? (,    50% ).   -     -50 ()    .  -     pnorm.  pnorm        , qnorm         p=0.5 mean=200 sd=30 q = qnorm(p = p, mean = mean, sd = sd) print(q) ## [1] 200       ( )    -50  200.     dnorm, rnorm, pnorm, qnorm "],["-.html", " 10 -      ", "  10 -     \\(H_0\\):  .   - .        ,   . \\(H_1\\):  ,  .         -        .  :           .    :      .        .  -       ,                 .                . p-value:          ,   \\(H_0\\) .   (\\(\\alpha\\)):    \\(H_0\\)  .    .   (\\(1-\\alpha\\)):        .        :    :        ,     (    ). ,           ( )      -        .   :     ,      . ,      -      .       ,    ,    .  \\(Z\\)   \\(Z\\)      (\\(\\mu = 0,\\space \\sigma = 1\\)) qnorm(*confidence level*) :       \\(\\alpha = 0.05\\)            \\(0.95\\).   \\(Z\\) . qnorm(0.95) ## [1] 1.644854        -      (\\(0.025\\)  )   \\(Z\\)       \\(0.975\\). qnorm(0.975) ## [1] 1.959964  \\(t\\)     \\(t\\)          ,  \\(\\alpha\\).     -           /    .      -       .  :            . qt(*confidence level*, *degrees of freedom*) :       \\(\\alpha = 0.04\\) - \\(df = 32\\)            \\(0.04\\).   \\(t\\) . qt(0.04, 32) ## [1] -1.808089    ,    -      (\\(0.02\\)  )   \\(t\\)       \\(0.98\\). qt(0.98, 32) ## [1] 2.140904 "],["-z.html", " 11 -  Z  Z    Z  ", "  11 -  Z  Z                   \\(\\sigma^2\\) -   \\(\\mu\\) -   \\(\\bar x\\) -   \\(N\\) -        \\(H_0:\\space\\mu = \\mu_0\\) \\(H_1:\\space\\mu \\ne \\mu_0\\)     \\(H_0:\\space\\mu = \\mu_0\\) \\(H_1:\\space\\mu &gt; \\mu_0\\)     \\(H_0:\\space\\mu = \\mu_0\\) \\(H_1:\\space\\mu &lt; \\mu_0\\)            /        (   ,  N &gt; 30)       \\(\\alpha\\) ( )   (  /    /   ) \\(Z_c(\\alpha)\\)         (      ): \\[\\sigma_{\\bar x} = \\frac {\\sigma_x}{\\sqrt{N} }\\]  : \\[Z_{\\bar x}=\\frac{\\bar x - _ \\bar x}{_ \\bar x}\\]   Z            \\(\\hat p\\) -   (\\(\\hat q = 1-\\hat p\\)) \\(N\\) -        \\(H_0:\\space p = p_0\\) \\(H_1:\\space p \\ne p_0\\)     \\(H_0:\\space p = p_0\\) \\(H_1:\\space p &gt; p_0\\)     \\(H_0:\\space p = p_0\\) \\(H_1:\\space p &lt; p_0\\)             -      (: \\(N \\cdot \\hat q&gt;5\\) : \\(N \\cdot \\hat p&gt;5\\))       \\(\\alpha\\) ( )   (  /    /   ) \\(Z_c(\\alpha)\\)         (    ): \\[\\sigma_{\\hat p} = \\sqrt \\frac {\\hat p \\cdot \\hat q}{N}\\]  : \\[Z_{\\hat p}=\\frac{\\hat p - p_0}{\\sigma_{\\hat p}}\\]  "],["-t.html", " 12 -  t  t    t       t     /   t   ", "  12 -  t  t           t  N-1        \\(\\mu\\) -   \\(\\bar x\\) -   \\({S_x}^2\\) -   \\(N\\) -        \\(H_0:\\space\\mu = \\mu_0\\) \\(H_1:\\space\\mu \\ne \\mu_0\\)     \\(H_0:\\space\\mu = \\mu_0\\) \\(H_1:\\space\\mu &gt; \\mu_0\\)     \\(H_0:\\space\\mu = \\mu_0\\) \\(H_1:\\space\\mu &lt; \\mu_0\\)                  \\(\\alpha\\) ( )   (  /    /   ) \\(df = N-1\\) \\(t_c(\\alpha, \\space df)\\)             : \\[\\hat{S}_{x} = \\sqrt{\\frac {\\sum{(x-\\bar x)^2}}{N - 1 }}= \\sqrt{\\frac {{S_x}^2 \\cdot N}{N - 1 }}\\]   (      ): \\[\\hat{S}_{\\bar x} = \\frac {\\hat{S}_x}{\\sqrt{N} }\\]  : \\[t_{\\bar x}=\\frac{\\bar x - _ \\bar x}{\\hat{S}_{\\bar x}}\\]   t                \\(\\bar x_1, \\space \\bar x_2\\) -   \\({S_{1}}^2, \\space {S_{2}}^2\\) -   \\(N_1, \\space N_2\\) -        \\(H_0:\\space{\\mu_1 - \\mu_2} = d_0\\) \\(H_1:\\space{\\mu_1 - \\mu_2} \\ne d_0\\)     \\(H_0:\\space{\\mu_1 - \\mu_2} = d_0\\) \\(H_1:\\space{\\mu_1 - \\mu_2} &gt; d_0\\)     \\(H_0:\\space{\\mu_1 - \\mu_2} = d_0\\) \\(H_1:\\space{\\mu_1 - \\mu_2} &lt; d_0\\)                       \\(\\alpha\\) ( )   (  /    /   ) \\(df = N_1 + N_2 - 2\\) \\(t_c(\\alpha, \\space df)\\)             : \\[\\hat{S}_{x} = \\sqrt{\\frac {\\sum{(x_1-\\bar x_1)^2}+ \\sum{(x_2-\\bar x_2)^2}}{N_1 + N_2 - 2}}\\] \\[= \\sqrt{\\frac {{S_1}^2 \\cdot N_1 + {S_2}^2 \\cdot N_2}{N_1 + N_2 - 2}}\\]   (    ): \\[\\hat{S}_{(\\bar x_1 - \\bar x_2)} = {\\hat{S}_x} \\cdot \\sqrt{{\\frac {1}{N_1} + \\frac {1}{N_2} }}\\]  : \\[t_{(\\bar x_1 - \\bar x_2)}=\\frac{(\\bar x_1 - \\bar x_2) - d_0}{\\hat{S}_{(\\bar x_1 - \\bar x_2)}}\\]   t     /            \\(\\bar d\\) -     (     ) \\({S_d}^2\\) -     \\(N\\) -   ( -   )      \\(H_0:\\space{\\mu_d} = d_0\\) \\(H_1:\\space{\\mu_d} \\ne d_0\\)     \\(H_0:\\space{\\mu_d} = d_0\\) \\(H_1:\\space{\\mu_d} &gt; d_0\\)     \\(H_0:\\space{\\mu_d} = d_0\\) \\(H_1:\\space{\\mu_d} &lt; d_0\\)         (d)          \\(\\alpha\\) ( )   (  /    /   ) \\(df = N - 1\\) \\(t_c(\\alpha, \\space df)\\)              ( ): \\[\\hat{S}_{d} = \\sqrt{\\frac {\\sum{(d-\\bar d)^2}}{N - 1}}= \\sqrt{\\frac {{S_d}^2 \\cdot N}{N - 1}}\\]   (       ): \\[\\hat{S}_{\\bar d} = \\frac{\\hat{S}_{d}} {\\sqrt{N}}\\]  : \\[t_{\\bar d}=\\frac{\\bar d - d_0}{\\hat{S}_{\\bar d}}\\]   t         \\(r\\) -   \\(N\\) -     \\(H_0:\\space{\\rho } = 0\\) \\(H_1:\\space{\\rho} \\ne 0\\)            -       \\(\\alpha\\) ( )    \\(df = N - 2\\) \\(t_c(\\alpha, \\space df)\\)       \\[t=r \\cdot \\sqrt {\\frac{N - 2}{1-r^2}}\\]  "],["-f.html", " 13 -  F     (One-Way ANOVA)   ()  F   ", "  13 -  F     (One-Way ANOVA)   \\(H_0:\\space{\\mu_1} = \\mu_2 =\\space...\\space= \\mu_n\\) \\(H_1:\\space else\\)             /            \\(\\alpha\\) ( )     \\(df_B = J - 1\\) \\(df_W = N - J\\) \\(t_c(\\alpha, \\space df_B, \\space df_W)\\)         : \\[ MSB = \\frac{\\sum_j n_j \\cdot (\\bar x_j - \\bar {\\bar x})^2} {J - 1} \\]   : \\[ MSW = \\frac{\\sum_i \\sum_j (x_{ij} - \\bar x_j)^2} {N - J} \\]  : \\[F = \\frac {MSB}{MSW}\\]    () \\(J-1\\)   -     : \\[c_1 = (-1,\\space1,\\space0)\\] \\[c_2 = (-1,\\space-1,\\space2)\\]   : \\[c_1 = (-1,\\space1,\\space0,\\space0)\\] \\[c_2 = (-1,\\space-1,\\space2,\\space0)\\] \\[c_3 = (-1,\\space-1,\\space-1,\\space3)\\]   : \\[c_1 = (-1,\\space1,\\space0,\\space0,\\space0)\\] \\[c_2 = (-1,\\space-1,\\space2,\\space0,\\space0)\\] \\[c_3 = (-1,\\space-1,\\space-1,\\space3,\\space0)\\] \\[c_4 = (-1,\\space-1,\\space-1,\\space-1,\\space4)\\]   -     \\[df_{comp} = 1\\] \\[MS_{comp} = n\\cdot\\frac {\\sum_i c_i \\cdot \\bar x_i}{\\sum_i {c_i}^2}\\] \\[F_c(\\alpha, \\space df_{comp}, \\space df_{W})\\] \\[F = \\frac {MS_{comp}}{MS_W}\\]   F      \\(H_0:\\space{{\\sigma_1}^2} = {\\sigma_1}^2\\) \\(H_1:\\space{{\\sigma_1}^2} \\ne {\\sigma_1}^2\\)                  \\(\\alpha\\) ( )     \\(df_1 = n_1 - 1\\) \\(df_2 = n_2 - 1\\) \\(t_c(\\alpha, \\space df_1, \\space df_2)\\)           : \\[ {\\hat S_1}^2 = \\sqrt{\\frac {\\sum{(x-\\bar x_1)^2}}{n_1 - 1 }}= \\sqrt{\\frac {{S_1}^2 \\cdot n_1}{n_1 - 1 }}\\] \\[ {\\hat S_2}^2 = \\sqrt{\\frac {\\sum{(x-\\bar x_2)^2}}{n_2 - 1 }}\\] \\[ = \\sqrt{\\frac {{S_2}^2 \\cdot n_2}{n_2 - 1 }}\\]  : \\[F = \\frac {{\\hat S_1}^2}{{\\hat S_2}^2}\\]  "],["--.html", " 14 -  -  -    -  ", "  14 -  -  -        \\(P_1, P_2, P_3... P_n\\) -       \\(O_1, O_2, O_3... O_n\\) -        \\(N\\) -     \\(:H_0\\)    \\(:H_1\\)               -           \\(df = 1\\):   \\(Ex \\ge 10\\)  \\(df &gt; 1\\):   \\(Ex \\ge 5\\)       \\(\\alpha\\) ( )     \\(df = J-1\\) \\({\\chi^2}_c(\\alpha, \\space df)\\)          : \\[E_i = P_i \\cdot N\\]  : \\[\\chi ^ 2=\\sum_{i} \\frac{(O_i - E_i)^2}{E_i}\\]  -     \\(:H_0\\)     1   2 \\(:H_1\\)     1   2           -           \\(df = 1\\):   \\(Ex \\ge 10\\)  \\(df &gt; 1\\):   \\(Ex \\ge 5\\)       \\(\\alpha\\) ( )     \\(df = (Rows - 1) \\cdot (Cols -1)\\) \\({\\chi^2}_c(\\alpha, \\space df)\\)          : \\[E_{ij} = \\frac{n_{i} \\cdot n_{j}}{N}\\]  : \\[\\chi ^ 2=\\sum_{i} \\sum_{j}\\frac{(O_{ij} - E_{ij})^2}{E_{ij}}\\] "],["--.html", "  ", "     -     : -  Z   -  t   -  Z   -  Z      -  t      -  t     /  -  F    -  t    -    ( ) -   -  -      -                (, ,      ,   , )          . "],["-.html", " ", "    1:    jumps -     0-10,   0.02.    jumps?    -20  jumps? jumps &lt;- seq(0,10,0.02) length(jumps) # 501 jumps[20] # 0.38 summary { display: list-item; text-align: right; } summary::after { content: ' ' } details[open] > summary::after { content: ' ' } "],["--.html", "  ", "     1:       1  10     (1,4,9,16 ). for (i in 1:10) { print(i^2) }  2:       1  100        3    7. for (i in 1:100) { if ((i %% 3 == 0 ) | (i %% 7 == 0)) { print(i) } }  3:       1  25      -8 23. for (i in 1:25) { if ((i != 8) &amp; (i != 23)) { print(i) } }  4:    num_to_skip nums_to_skip &lt;- c(3,6,8,22,32,33)       1  40       nums_to_skip.  - %in% : 3 %in% nums_to_skip # returns TRUE 5 %in% nums_to_skip # returns FALSE nums_to_skip &lt;- c(3,6,8,22,32,33) for (i in 1:40) { if ( ! (i %in% nums_to_skip)) { print(i) } }  5:    samples  10000 .    ,    70      80   5 (  rnorm).         sample.     sample_means ( )          ,      10000 . sample_means &lt;- c() set.seed(32) # to make sure the results # will be the same every time the code run. for (i in 1:10000) { sample &lt;- rnorm(70, 80, 5) sample_means[i] &lt;- mean(sample) } #hist(sample_means, breaks = 100)  6:      sample_means  ,   :     80   5.   70       .   10,000 .       .       .     .    -n ?    ?   ?    ? (,     )           7:        : numbers &lt;- c(3,5,6,8,2,44,45,5)     6. numbers &lt;- c(3,5,6,8,2,44,45,5) for (number in numbers) { print(number &gt; 6) } numbers &lt;- c(3,5,6,8,2,44,45,5) for (number in numbers) { if (number &gt; 6) { print(paste(number, &#39;is bigger than 6&#39;)) } else { print(paste(number, &#39;is not bigger than 6&#39;)) } } summary { display: list-item; text-align: right; } summary::after { content: ' ' } details[open] > summary::after { content: ' ' } "],["--.html", "  ", "     1:    num_to_txt   -0  9 (numeric)     (character). : num_to_txt(4) # returns &quot;four&quot; num_to_txt &lt;- function(digit) { if (class(digit) == &quot;numeric&quot; &amp; nchar(digit) == 1) { if (digit == 0) {return (&#39;zero&#39;)} else if (digit == 1) {return (&#39;one&#39;)} else if (digit == 2) {return (&#39;two&#39;)} else if (digit == 3) {return (&#39;three&#39;)} else if (digit == 4) {return (&#39;four&#39;)} else if (digit == 5) {return (&#39;five&#39;)} else if (digit == 6) {return (&#39;six&#39;)} else if (digit == 7) {return (&#39;seven&#39;)} else if (digit == 8) {return (&#39;eight&#39;)} else if (digit == 9) {return (&#39;nine&#39;)} } else {return(&#39;not a valid digit. please try again&#39;)} } num_to_txt(3) # &quot;three&quot; num_to_txt(7) # &quot;seven&quot; num_to_txt(13) # &quot;Not a valid digit. please try again&quot; num_to_txt(9) # &quot;nine&quot; # another way, with dyplr: library(&#39;tidyverse&#39;) num_to_txt &lt;- function(digit) { if (class(digit) == &quot;numeric&quot; &amp; nchar(digit) == 1) { edited &lt;- data.frame(digit) %&gt;% mutate(converted = case_when( . == 0 ~ &#39;zero&#39;, . == 1 ~ &#39;one&#39;, . == 2 ~ &#39;two&#39;, . == 3 ~ &#39;three&#39;, . == 4 ~ &#39;four&#39;, . == 5 ~ &#39;five&#39;, . == 6 ~ &#39;six&#39;, . == 7 ~ &#39;seven&#39;, . == 8 ~ &#39;eight&#39;, . == 9 ~ &#39;nine&#39;,)) return(edited$converted) } else {return(&#39;not a valid digit. please try again&#39;)} } num_to_txt(5) # &quot;five&quot; num_to_txt(8) # &quot;eight&quot;  2:    is_even   (numeric)     (TRUE  FALSE). : is_even(456) # returns TRUE is_even &lt;- function(num) { if (class(num) == &quot;numeric&quot;) { if (num %% 2 == 0) {return (TRUE)} else {return (FALSE)} } else {return(&#39;not a valid number please try again&#39;)} } is_even(2) # TRUE is_even(67253) # FALSE is_even(3586976) # TRUE is_even(&#39;34&#39;) # &#39;Not a valid number please try again&#39; summary { display: list-item; text-align: right; } summary::after { content: ' ' } details[open] > summary::after { content: ' ' } "]]
